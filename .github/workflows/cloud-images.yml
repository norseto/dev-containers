name: 02 Base Cloud Provider Dev Image

on:
  workflow_dispatch: {}
  push:
    branches: [ feature/* ]
    paths:
    - providers/Dockerfile
    - .github/workflows/cloud-images.yml
  pull_request:
    branches: [ develop ]
    paths:
    - providers/*

env:
  REGISTRY: norseto
  TEST_REGISTRY: norseto/test
  DOCKERFILE: ./providers/Dockerfile

jobs:
  path-context:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
        - [ "dev-base", "gcp",   "INST_GCPSDK=1"]
        - [ "dev-base", "aws",   "INST_AWSCLI=1"]
        - [ "dev-base", "azure", "INST_AZURECLI=1"]
        - [ "dev-base", "full",  "INST_GCPSDK=1,INST_AWSCLI=1,INST_AZURECLI=1"]
    steps:
    - uses: actions/checkout@v2
    - id: imagetag
      name: Determine Target
      run: |
        echo ::set-output name=dockerfile::${DOCKERFILE}
        MAIN=$(echo "${GITHUB_REF}" | grep -e "/main$">/dev/null; echo $?)
        if [ $MAIN -eq 1 ] ; then
          TAG=$(echo ${{ matrix.target[1] }} | awk -F, '{for (i=1; i<=NF; i++){printf("${{ matrix.target[0] }}-%s,", $i);}}' | sed -e 's/,$//')
          echo ::set-output name=tag::${TAG}
          echo ::set-output name=repository::${TEST_REGISTRY}
          echo ::set-output name=cache::${TEST_REGISTRY}:${{ matrix.target[0] }}-${{ matrix.target[1] }}
        else
          echo ::set-output name=repository::${REGISTRY}/${{ matrix.target[0] }}
          echo ::set-output name=tag::${{ matrix.target[1] }}
          echo ::set-output name=cache::""
        fi
        if [ ${GITHUB_EVENT_NAME} = "push" ] || [ ${GITHUB_EVENT_NAME} = "workflow_dispatch" ] ; then
          echo ::set-output name=pushimg::true
        else
          echo ::set-output name=pushimg::false
        fi
    - name: Build and push
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        path: .
        repository: ${{ steps.imagetag.outputs.repository }}
        dockerfile: ${{ steps.imagetag.outputs.dockerfile }}
        tags: ${{ steps.imagetag.outputs.tag }}
        build_args: ${{ matrix.target[2] }}
        push: ${{ steps.imagetag.outputs.pushimg }}
        cache_froms: ${{ steps.imagetag.outputs.cache }}

